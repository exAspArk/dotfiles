call plug#begin('~/.vim/plugged')

" text editing
Plug 'tpope/vim-surround'                               " better brackets
Plug 'scrooloose/syntastic'                             " check syntax
Plug 'tpope/vim-commentary'                             " comments
Plug 'tpope/vim-repeat'                                 " repeat more commands with '.'
Plug 'terryma/vim-multiple-cursors'                     " multiple cursors like in ST
Plug 'Shougo/deoplete.nvim', { 'on': [], 'do': ':UpdateRemotePlugins', 'tag': 'e28d519' } " autocomplete, use e28d519 because of https://github.com/Shougo/deoplete.nvim/issues/291
Plug 'Raimondi/delimitMate', { 'on': [] }               " closing brackets
Plug 'terryma/vim-expand-region'                        " change visual selection by using '+' / '-'
Plug 'mbbill/undotree'                                  " undo history tree
Plug 'Yggdroot/indentLine'                              " indent columns

" navigation
Plug 'scrooloose/nerdtree'                              " file tree
Plug 'dyng/ctrlsf.vim'                                  " better text search
Plug 'kopischke/vim-fetch'                              " open file with line and column number
Plug 'yegappan/mru'                                     " most recently used files
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search

" files
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby', 'on': [] }   " auto end
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }          " run rspec
Plug 'tpope/vim-bundler', { 'for': 'ruby' }             " bundle commands and smart ctags

" js / jsx / html
Plug 'othree/yajs.vim', { 'for': [] }                   " javascript
Plug 'mxw/vim-jsx', { 'for': [] }                       " jsx
Plug 'valloric/MatchTagAlways', { 'for': ['html', 'javascript.jsx'] } " highlight match tags

" clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }        " repl

" syntaxes and languages
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }      " elixir
Plug 'slim-template/vim-slim', { 'for': 'slim' }        " slim
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }    " coffee script
" Plug 'suan/vim-instant-markdown', { 'for': 'markdown' } " real time markdown editing
Plug 'nono/vim-handlebars', { 'for': 'handlebars.html' }
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }

" theme
Plug 'w0ng/vim-hybrid'                                  " theme
Plug 'bling/vim-airline'                                " status line

" repl
Plug 'metakirby5/codi.vim'

call plug#end()

" theme
color hybrid

" call MRU plugin with Alt + r
nnoremap ® :MRU<CR>

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory and iTerm title
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
  \ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
  \ " | :silent !title_pwd" | execute ":redraw!"

" jump to defenition with fireplace
nnoremap <C-[><C-[> [<C-d>

" vim-rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" git gutter
nmap <Leader>j <Plug>GitGutterNextHunk
nmap <Leader>k <Plug>GitGutterPrevHunk
nmap <Leader>u <Plug>GitGutterUndoHunk
nmap <Leader>a <Plug>GitGutterStageHunk
nmap <Leader>d <Plug>GitGutterPreviewHunk

" undo history
nmap <Leader>h :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1

" alternate files
function! AltCommand(path, vim_command)
  let l:alternate = system("gfind . -name '*.rb' -type f -print0 | alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction
nnoremap <Leader>o :call AltCommand(expand('%'), ':e')<CR>

" run FZF by using Alt + P
nnoremap π "_:FZF<CR>

" search with CtrlSF
nnoremap <C-f> "_:CtrlSF 
let g:ctrlsf_case_sensitive = 'no'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_ignore_dir = ['node_modules']
if executable('ag')
  let g:ctrlsf_ackprg = 'ag' " use The Silver Searcher https://github.com/ggreer/the_silver_searcher
endif

" Plug load some plugins not while starting vim
augroup lazy_load
  autocmd!
  autocmd! InsertEnter * call plug#load('deoplete.nvim', 'delimitMate', 'vim-endwise')
                      \| if exists('g:loaded_deoplete')
                      \|   call deoplete#enable()
                      \| endif
                      \| autocmd! lazy_load
augroup END

augroup custom_types
  autocmd!
  autocmd FileType javascript call plug#load('yajs.vim', 'vim-jsx')
                      \| execute 'autocmd! custom_types'
                      \| doautocmd FileType
augroup END

" indent lines char
let g:indentLine_enabled = 1
let g:indentLine_char = '¦'

augroup json_conceal
  autocmd! Filetype json let g:indentLine_enabled = 0
                      \| autocmd! json_conceal
augroup END

" autocomplete
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_smart_case = 0
let g:deoplete#delimiters = ['/', '.', '::', ':', '#']
let g:deoplete#max_list = 5
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_refresh_delay = 0
let g:neocomplete#min_pattern_length = 2

" <TAB>: completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" status line
let g:airline#extensions#tabline#enabled = 1
let g:airline_detect_crypt = 0
let g:airline_section_y = ''
let g:airline_section_warning = ''

" multiple cursors
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_start_word_key='g<C-n>'

" markdown preview
let g:instant_markdown_slow = 1

" rspec command
let g:rspec_command = "!rr {spec}"

" MatchTagAlways
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0
highlight MatchTag ctermbg=240 guifg=#585858
let g:mta_filetypes = {'html' : 1, 'javascript.jsx': 1}

" Javascript
let g:syntastic_javascript_checkers = ['eslint']

" JSX
let g:jsx_ext_required = 0
