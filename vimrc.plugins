call plug#begin('~/.vim/plugged')

" text editing
Plug 'tpope/vim-surround'                               " better brackets
Plug 'tpope/vim-commentary'                             " comments
Plug 'tpope/vim-repeat'                                 " repeat more commands with '.'
Plug 'mg979/vim-visual-multi'                           " multiple cursors like in ST
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Raimondi/delimitMate', { 'on': [] }               " closing brackets
Plug 'alvan/vim-closetag', { 'on': [] }                 " closing tags
Plug 'terryma/vim-expand-region'                        " change visual selection by using '+' / '-'
Plug 'nathanaelkane/vim-indent-guides'                  " indent columns
Plug 'w0rp/ale'                                         " lint
Plug 'Shougo/neosnippet', { 'on': [] }                  " snippets

" navigation
Plug 'scrooloose/nerdtree'                              " file tree
Plug 'dyng/ctrlsf.vim'                                  " better text search
Plug 'kopischke/vim-fetch'                              " open file with line and column number
Plug 'yegappan/mru'                                     " most recently used files
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search

" files
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby', 'on': [] }   " auto end
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }          " run rspec
Plug 'tpope/vim-bundler', { 'for': 'ruby' }             " bundle commands and smart ctags

" js / jsx / ts / tsx
Plug 'othree/yajs.vim', { 'for': [] }                   " javascript
Plug 'mxw/vim-jsx', { 'for': [] }                       " jsx
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'peitalin/vim-jsx-typescript', { 'for': 'typescript' }

" elixir
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }
Plug 'mhinz/vim-mix-format', { 'for': ['elixir', 'eelixir'] }

" syntaxes and languages
Plug 'valloric/MatchTagAlways', { 'for': ['html', 'eruby', 'eelixir', 'javascript.jsx', 'typescript.tsx'] }                                                 " highlight match tags
Plug 'shime/vim-livedown', { 'for': 'markdown' }        " real time markdown editing

" theme
Plug 'w0ng/vim-hybrid'                                  " theme
Plug 'bling/vim-airline'                                " status line

call plug#end()

" theme
color hybrid

" call MRU plugin with Alt + r
nnoremap <A-r> :MRU<CR>

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory and iTerm title
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
  \ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
  \ " | :silent !title_pwd" | execute ":redraw!"

" vim-rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" git gutter
nmap <Leader>j <Plug>(GitGutterNextHunk)
nmap <Leader>k <Plug>(GitGutterPrevHunk)
nmap <Leader>u <Plug>(GitGutterUndoHunk)
nmap <Leader>a <Plug>(GitGutterStageHunk)
nmap <Leader>d <Plug>(GitGutterPreviewHunk)

" undo history
nmap <Leader>h :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1

" alternate files
function! AltCommand(path, vim_command)
  let l:alternate = system("gfind . -name '*.rb' -type f -print0 | alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction
nnoremap <Leader>o :call AltCommand(expand('%'), ':e')<CR>

" run FZF by using Alt + p
nnoremap <A-p> "_:FZF<CR>

" search with CtrlSF
nnoremap <A-f> "_:CtrlSF 
let g:ctrlsf_case_sensitive = 'no'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_ignore_dir = ['node_modules', '.git', 'deps']
if executable('rg')
  let g:ctrlsf_ackprg = 'rg' " use ripgrep
  let g:ctrlsf_extra_backend_args = {
    \ 'rg': '--hidden'
    \ }
endif

" vim-closetag
let g:closetag_filenames = '*.js,*.tsx,*.xml,*.html'

" Plug load some plugins not while starting vim
augroup lazy_load
  autocmd!
  autocmd! InsertEnter * call plug#load('delimitMate', 'vim-endwise', 'neosnippet', 'vim-closetag')
augroup END

augroup custom_types
  autocmd!
  autocmd FileType javascript call plug#load('yajs.vim', 'vim-jsx')
augroup END

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
hi IndentGuidesOdd ctermbg=234
hi IndentGuidesEven ctermbg=235

" autocomplete
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option({
\ 'auto_complete_delay': 0,
\ 'auto_refresh_delay': 100,
\ 'max_list': 5,
\ 'smart_case': v:false,
\ 'ignore_case': v:false,
\ 'converter_auto_delimiter': ['/', '.', '::', ':', '#'],
\ })

" <TAB>: completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" status line
let g:airline#extensions#tabline#enabled = 1
let g:airline_detect_crypt = 0
let g:airline_section_y = ''
let g:airline_section_warning = ''

" rspec command
let g:rspec_command = "below new | term spring --version > /dev/null && spring rspec {spec} || bundle exec rspec {spec}"

" MatchTagAlways
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0
highlight MatchTag ctermbg=240 guifg=#585858
let g:mta_filetypes = {'html' : 1, 'eruby': 1, 'javascript.jsx': 1, 'typescript.tsx': 1}

" don't run linters on opening a file
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\ 'ruby': ['rubocop'],
\ }
let g:ale_fixers = {
\ 'javascript': ['eslint'],
\ }
let g:ale_fix_on_save = 1

" JSX
let g:jsx_ext_required = 0

" elixir
let g:mix_format_on_save = 1

" neosnippet
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim-snippets'
" w/o neosnippet-snippets plugin
let g:neosnippet#disable_runtime_snippets = {
\   '_' : 1,
\ }
" expand snippet on TAB or switch to the next suggestion with deoplete
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
