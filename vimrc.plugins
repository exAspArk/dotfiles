call plug#begin('~/.vim/plugged')

" text editing
Plug 'tpope/vim-surround'                               " better brackets
Plug 'tpope/vim-commentary'                             " comments
Plug 'tpope/vim-abolish'                                " coerce camelCase / snake_case
Plug 'mg979/vim-visual-multi'                           " multiple cursors like in ST
Plug 'Raimondi/delimitMate', { 'on': [] }               " closing brackets
Plug 'alvan/vim-closetag', { 'on': [] }                 " closing tags
Plug 'terryma/vim-expand-region'                        " change visual selection by using '+' / '-'
Plug 'nathanaelkane/vim-indent-guides'                  " indent columns
Plug 'w0rp/ale', { 'on': [] }                           " lint
Plug 'neoclide/coc.nvim', { 'on': [], 'branch': 'release'} " autocomplete and LSP: coc-solargraph, coc-tsserver
Plug 'github/copilot.vim', { 'on': [] }                 " smart autocompletion

" navigation
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } " file tree
Plug 'dyng/ctrlsf.vim', { 'on': 'CtrlSF' }              " better text search
Plug 'kopischke/vim-fetch'                              " open file with line and column number
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search
Plug 'junegunn/fzf.vim'                                  " search buffers

" files
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-rails', { 'for': 'ruby' }               " rails
Plug 'tpope/vim-endwise', { 'for': ['ruby', 'elixir'], 'on': [] } " auto end
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }          " run rspec
Plug 'tpope/vim-bundler', { 'for': 'ruby' }             " bundle commands and smart ctags

" js / jsx / ts / tsx
Plug 'pangloss/vim-javascript', { 'for': ['javascript'] }
Plug 'MaxMEllon/vim-jsx-pretty', { 'for': ['javascript'] }
Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }
Plug 'peitalin/vim-jsx-typescript', { 'for': ['typescript'] }

" elixir
Plug 'elixir-lang/vim-elixir', { 'for': ['elixir', 'eelixir'] }
Plug 'mhinz/vim-mix-format', { 'for': ['elixir', 'eelixir'] }

" syntaxes and languages
Plug 'valloric/MatchTagAlways', { 'for': ['xml', 'html', 'eruby', 'eelixir', 'javascriptreact', 'typescriptreact'] } " highlight matching tags
Plug 'shime/vim-livedown', { 'for': 'markdown' }        " real time markdown editing
Plug 'jjo/vim-cue', { 'for': 'cue' }

" theme
Plug 'bling/vim-airline'                                " status line
Plug 'vim-airline/vim-airline-themes'
Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' } " show colours in the code

call plug#end()

" Custom theme https://github.com/sonph/onehalf ===============================
highlight clear
syntax reset

let g:colors_name="onehalflight"
let colors_name="onehalflight"

let s:black       = { "gui": "#383a42", "cterm": "237" }
let s:red         = { "gui": "#e45649", "cterm": "167" }
let s:green       = { "gui": "#50a14f", "cterm": "71" }
let s:yellow      = { "gui": "#c18401", "cterm": "136" }
let s:blue        = { "gui": "#0184bc", "cterm": "31" }
let s:purple      = { "gui": "#004e9c", "cterm": "127" }
let s:cyan        = { "gui": "#0997b3", "cterm": "31" }
let s:white       = { "gui": "#fafafa", "cterm": "231" }


let s:fg          = s:black
let s:bg          = s:white

let s:comment_fg  = { "gui": "#a0a1a7", "cterm": "247" }
let s:gutter_bg   = { "gui": "#fafafa", "cterm": "231" }
let s:gutter_fg   = { "gui": "#d4d4d4", "cterm": "252" }
let s:non_text    = { "gui": "#e5e5e5", "cterm": "252" }

let s:cursor_line = { "gui": "#f0f0f0", "cterm": "255" }
let s:color_col   = { "gui": "#f0f0f0", "cterm": "255" }

let s:selection   = { "gui": "#bfceff", "cterm": "153" }
let s:vertsplit   = { "gui": "#f0f0f0", "cterm": "255" }

function! s:h(group, fg, bg, attr)
  if type(a:fg) == type({})
    exec "hi " . a:group . " guifg=" . a:fg.gui . " ctermfg=" . a:fg.cterm
  else
    exec "hi " . a:group . " guifg=NONE cterm=NONE"
  endif
  if type(a:bg) == type({})
    exec "hi " . a:group . " guibg=" . a:bg.gui . " ctermbg=" . a:bg.cterm
  else
    exec "hi " . a:group . " guibg=NONE ctermbg=NONE"
  endif
  if a:attr != ""
    exec "hi " . a:group . " gui=" . a:attr . " cterm=" . a:attr
  else
    exec "hi " . a:group . " gui=NONE cterm=NONE"
  endif
endfun

" User interface colors {
call s:h("Normal", s:fg, s:bg, "")

call s:h("Cursor", s:bg, s:blue, "")
call s:h("CursorColumn", "", s:cursor_line, "")
call s:h("CursorLine", "", s:cursor_line, "")

call s:h("LineNr", s:gutter_fg, s:gutter_bg, "")
call s:h("CursorLineNr", s:fg, "", "")

call s:h("DiffAdd", s:green, "", "")
call s:h("DiffChange", s:yellow, "", "")
call s:h("DiffDelete", s:red, "", "")
call s:h("DiffText", s:blue, "", "")

call s:h("IncSearch", s:bg, s:purple, "")
call s:h("Search", s:bg, s:purple, "")

call s:h("ErrorMsg", s:fg, "", "")
call s:h("ModeMsg", s:fg, "", "")
call s:h("MoreMsg", s:fg, "", "")
call s:h("WarningMsg", s:red, "", "")
call s:h("Question", s:purple, "", "")

call s:h("Pmenu", s:fg, s:cursor_line, "")
call s:h("PmenuSel", s:bg, s:blue, "")
call s:h("PmenuSbar", "", s:cursor_line, "")
call s:h("PmenuThumb", "", s:comment_fg, "")

call s:h("SpellBad", s:red, "", "")
call s:h("SpellCap", s:yellow, "", "")
call s:h("SpellLocal", s:yellow, "", "")
call s:h("SpellRare", s:yellow, "", "")

call s:h("StatusLine", s:blue, s:cursor_line, "")
call s:h("StatusLineNC", s:comment_fg, s:cursor_line, "")
call s:h("TabLine", s:comment_fg, s:cursor_line, "")
call s:h("TabLineFill", s:comment_fg, s:cursor_line, "")
call s:h("TabLineSel", s:fg, s:bg, "")

call s:h("Visual", "", s:selection, "")
call s:h("VisualNOS", "", s:selection, "")

call s:h("ColorColumn", "", s:color_col, "")
call s:h("Conceal", s:fg, "", "")
call s:h("Directory", s:blue, "", "")
call s:h("VertSplit", s:vertsplit, s:vertsplit, "")
call s:h("Folded", s:fg, "", "")
call s:h("FoldColumn", s:fg, "", "")
call s:h("SignColumn", s:fg, "", "")

call s:h("MatchParen", s:red, "", "underline")
call s:h("SpecialKey", s:fg, "", "")
call s:h("Title", s:green, "", "")
call s:h("WildMenu", s:fg, "", "")
" }

" Syntax colors {
" Whitespace is defined in Neovim, not Vim.
" See :help hl-Whitespace and :help hl-SpecialKey
call s:h("Whitespace", s:non_text, "", "")
call s:h("NonText", s:non_text, "", "")
call s:h("Comment", s:comment_fg, "", "italic")
call s:h("Constant", s:red, "", "")
call s:h("String", s:green, "", "")
call s:h("Character", s:green, "", "")
call s:h("Number", s:red, "", "")
call s:h("Boolean", s:red, "", "")
call s:h("Float", s:red, "", "")

call s:h("Identifier", s:blue, "", "")
call s:h("Function", s:fg, "", "")
call s:h("Statement", s:purple, "", "")

call s:h("Conditional", s:purple, "", "")
call s:h("Repeat", s:purple, "", "")
call s:h("Label", s:purple, "", "")
call s:h("Operator", s:fg, "", "")
call s:h("Keyword", s:red, "", "")
call s:h("Exception", s:purple, "", "")

call s:h("PreProc", s:yellow, "", "")
call s:h("Include", s:purple, "", "")
call s:h("Define", s:purple, "", "")
call s:h("Macro", s:purple, "", "")
call s:h("PreCondit", s:yellow, "", "")

call s:h("Type", s:yellow, "", "")
call s:h("StorageClass", s:yellow, "", "")
call s:h("Structure", s:yellow, "", "")
call s:h("Typedef", s:yellow, "", "")

call s:h("Special", s:blue, "", "")
call s:h("SpecialChar", s:fg, "", "")
call s:h("Tag", s:fg, "", "")
call s:h("Delimiter", s:green, "", "")
call s:h("SpecialComment", s:comment_fg, "", "italic,bold")
call s:h("Debug", s:fg, "", "")
call s:h("Underlined", s:fg, "", "")
call s:h("Ignore", s:fg, "", "")
call s:h("Error", s:red, s:gutter_bg, "")
call s:h("Todo", s:comment_fg, "", "italic,bold")
" }

" Plugins {
" GitGutter
call s:h("GitGutterAdd", s:green, s:gutter_bg, "")
call s:h("GitGutterDelete", s:red, s:gutter_bg, "")
call s:h("GitGutterChange", s:yellow, s:gutter_bg, "")
call s:h("GitGutterChangeDelete", s:red, s:gutter_bg, "")
" Fugitive
call s:h("diffAdded", s:green, "", "")
call s:h("diffRemoved", s:red, "", "")
" }

" Git {
call s:h("gitcommitComment", s:comment_fg, "", "")
call s:h("gitcommitUnmerged", s:red, "", "")
call s:h("gitcommitOnBranch", s:fg, "", "")
call s:h("gitcommitBranch", s:purple, "", "")
call s:h("gitcommitDiscardedType", s:red, "", "")
call s:h("gitcommitSelectedType", s:green, "", "")
call s:h("gitcommitHeader", s:fg, "", "")
call s:h("gitcommitUntrackedFile", s:cyan, "", "")
call s:h("gitcommitDiscardedFile", s:red, "", "")
call s:h("gitcommitSelectedFile", s:green, "", "")
call s:h("gitcommitUnmergedFile", s:yellow, "", "")
call s:h("gitcommitFile", s:fg, "", "")
hi link gitcommitNoBranch gitcommitBranch
hi link gitcommitUntracked gitcommitComment
hi link gitcommitDiscarded gitcommitComment
hi link gitcommitSelected gitcommitComment
hi link gitcommitDiscardedArrow gitcommitDiscardedFile
hi link gitcommitSelectedArrow gitcommitSelectedFile
hi link gitcommitUnmergedArrow gitcommitUnmergedFile
" }

" Fix colors in neovim terminal buffers {
let g:terminal_color_0 = s:black.gui
let g:terminal_color_1 = s:red.gui
let g:terminal_color_2 = s:green.gui
let g:terminal_color_3 = s:yellow.gui
let g:terminal_color_4 = s:blue.gui
let g:terminal_color_5 = s:purple.gui
let g:terminal_color_6 = s:cyan.gui
let g:terminal_color_7 = s:white.gui
let g:terminal_color_8 = s:black.gui
let g:terminal_color_9 = s:red.gui
let g:terminal_color_10 = s:green.gui
let g:terminal_color_11 = s:yellow.gui
let g:terminal_color_12 = s:blue.gui
let g:terminal_color_13 = s:purple.gui
let g:terminal_color_14 = s:cyan.gui
let g:terminal_color_15 = s:white.gui
let g:terminal_color_background = s:bg.gui
let g:terminal_color_foreground = s:fg.gui
" }
" =============================================================================

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>
" cd by updating NERDTree current directory and iTerm title
command! -bar -nargs=1 -complete=file CD execute ":cd " . fnamemodify(<q-args>, ':p:h') .
  \ " | NERDTree " . fnamemodify(<q-args>, ':p:h') . " | NERDTreeToggle" .
  \ " | :silent !title_pwd" | execute ":redraw!"

" vim-rspec
" map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" git gutter
let g:gitgutter_map_keys = 0
nmap <Leader>j <Plug>(GitGutterNextHunk)
nmap <Leader>k <Plug>(GitGutterPrevHunk)
nmap <Leader>u <Plug>(GitGutterUndoHunk)
nmap <Leader>a <Plug>(GitGutterStageHunk)

" alternate files
function! AltCommand(path, vim_command)
  let l:alternate = system("alt " . a:path)
  if empty(l:alternate)
    echo "No alternate file for " . a:path . " exists!"
  else
    exec a:vim_command . " " . l:alternate
  endif
endfunction
nnoremap <Leader>o :call AltCommand(expand('%'), ':e')<CR>

" run FZF by using Alt + p
nnoremap <Leader>p "_:FZF -i<CR>
let g:fzf_preview_window = ['up:50%:hidden', 'ctrl-/']

" list buffers
nnoremap <Leader>b :Buffers<CR>

" list recently open files
nnoremap <Leader>h :History<CR>

" list ctags
nnoremap <Leader>t yiw :Tags <C-R>"<CR>
vnoremap <Leader>t y:Tags <C-R>"<CR>

" search with CtrlSF
nnoremap <Leader>f "_:CtrlSF -ignoredir spec<Space>
vnoremap <Leader>f y:CtrlSF -ignoredir spec <C-R>"
nnoremap <Leader>F "_:CtrlSF<Space>
let g:ctrlsf_case_sensitive = 'no'
let g:ctrlsf_position = 'bottom'
let g:ctrlsf_ignore_dir = ['.git', '.next', 'node_modules', 'deps', 'tmp', 'log']
if executable('rg')
  let g:ctrlsf_ackprg = 'rg' " use ripgrep
  let g:ctrlsf_extra_backend_args = {
    \ 'rg': '--hidden --no-ignore --glob !tags --glob !.pry_history --glob !tsconfig.tsbuildinfo'
    \ }
endif

" visual-multi
let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<A-n>'
let g:VM_maps['Find Subword Under'] = '<A-n>'

augroup lazy_load_on_insert
  autocmd!
  autocmd InsertEnter * call plug#load('delimitMate', 'ale', 'coc.nvim', 'copilot.vim')
  autocmd InsertEnter *.rb,*.ex call plug#load('vim-endwise')
  autocmd InsertEnter *.js,*.jsx,*.tsx,*.xml,*.html,*.erb,*.eex call plug#load('vim-closetag')
augroup END

" <TAB>: completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" disable auto closing <:>
let delimitMate_matchpairs = "(:),{:},[:]"

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_color_change_percent = 2

" status line
let g:airline_theme='sol'
let g:airline#extensions#tabline#enabled = 1
let g:airline_detect_crypt = 0
let g:airline_section_y = ''
let g:airline_section_warning = ''

" rspec command
let g:rspec_command = "below new | term spring --version > /dev/null && spring rspec {spec} || bundle exec rspec {spec}"

" MatchTagAlways
let g:mta_use_matchparen_group = 0
let g:mta_set_default_matchtag_color = 0
highlight MatchTag ctermbg=240 guifg=#585858
let g:mta_filetypes = {'html' : 1, 'eruby': 1, 'javascriptreact': 1, 'typescriptreact': 1}

" don't run linters on opening a file
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\ 'ruby': ['rubocop'],
\ 'javascript': ['eslint'],
\ }
let g:ale_fixers = {
\ }
let g:ale_fix_on_save = 1

" JSX
let g:jsx_ext_required = 0

" elixir
let g:mix_format_on_save = 1
