---
- hosts: all
  tasks:
    - stat: path=~/.zsh_history
      register: zsh_history

    - stat: path={{ backup_path }}/zsh_history
      register: backup_zsh_history

    - set_fact: newer_zsh_history={{ backup_zsh_history.stat.exists and zsh_history.stat.ctime > backup_zsh_history.stat.ctime }}

    - file: path={{ backup_path }}/zsh_history state=absent
      when: newer_zsh_history

    - pause: seconds=10
      when: newer_zsh_history

    - copy: src=~/.zsh_history dest={{ backup_path }}/zsh_history
      when: newer_zsh_history or not backup_zsh_history.stat.exists

    - synchronize: src=~/.ssh/ dest={{ backup_path }}/ssh times=yes recursive=yes rsync_opts="-u"

    - file: path={{ backup_path }}/gpg state=directory

    # - name: Backup GPG key
    #   shell: >
    #     gpg -a --export {{ item }} > {{ backup_path }}/gpg/public_{{ item }}.key &&
    #     gpg -a --export-secret-keys {{ item }} > {{ backup_path }}/gpg/private_{{ item }}.key &&
    #     gpg --export-ownertrust > {{ backup_path }}/gpg/ownertrust.txt
    #   with_items:
    #     - exaspark@gmail.com

    # - name: Check Sequel Pro favorites existance
    #   stat: path="~/Library/Application Support/Sequel Pro/Data/Favorites.plist"
    #   register: sequel_pro_favorites

    # - synchronize:
    #     src: '~/Library/Application Support/Sequel Pro/Data/Favorites.plist'
    #     dest: '{{ backup_path }}/SequelProFavorites.plist'
    #     times: yes
    #     rsync_opts: "-u"
    #   when: sequel_pro_favorites.stats.isreg is defined

    # - name: Create PSequel directory
    #   file: path={{ backup_path }}/psequel state=directory

    # - name: Backup PSequel connections
    #   synchronize:
    #     src: "~/Library/Application\ Support/com.psequel.PSequel/"
    #     dest: "{{ backup_path }}/psequel"
    #     times: yes
    #     recursive: yes
    #     rsync_opts: "-u"
